#pragma once
#include <memory>
#include <string>
#include <vector>

#include "BittyParser.h"  // generated by ANTLR (PACKAGE bitty::parser)
#include "antlr4-runtime.h"
#include "common/AST.hpp"

class ASTBuilder {
  using BittyParser = bitty::parser::BittyParser;

 public:
  bitty::AST::Program build(BittyParser::ProgramContext* program);

 private:
  using PExpr = std::unique_ptr<bitty::AST::Expression>;
  using PStmt = std::unique_ptr<bitty::AST::Statement>;

  // statements
  PStmt buildStatement(BittyParser::StatementContext* s);
  PStmt buildBlock(BittyParser::BlockStmtContext* b);
  PStmt buildVarDecl(BittyParser::VarDeclStmtContext* s);
  PStmt buildIf(BittyParser::IfStmtContext* s);
  PStmt buildWhile(BittyParser::WhileStmtContext* s);
  PStmt buildReturn(BittyParser::ReturnStmtContext* s);
  PStmt buildExprStmt(BittyParser::ExpressionContext* e);
  PStmt buildFuncDecl(BittyParser::FuncDeclStmtContext* ctx);
  PStmt buildPrintStmt(BittyParser::ExpressionContext* e);

  // expressions
  PExpr buildExpression(BittyParser::ExpressionContext* e);
  PExpr buildPrimary(BittyParser::PrimaryContext* p);
  PExpr buildCall(BittyParser::ExprCallContext* e);
  PExpr buildUnary(BittyParser::ExprUnaryContext* e);
  PExpr buildBinary(BittyParser::ExpressionContext* L, antlr4::Token* opTok,
                    BittyParser::ExpressionContext* R);
  PExpr buildAssign(BittyParser::ExprAssignContext* e);

  // literals
  bitty::LiteralValue buildLiteral(BittyParser::LiteralContext* lit);
};
