fn sqrt_newton(x: Float): Float {
  if (x == 0) {
    return 0.0: Float;
  }
  let g: Float;
  g = x * 1.0: Float;
  let i: Int;
  i = 0: Int;
  while (i < 12: Bool) {
    __t0 = x / g: Float;
    __t1 = g + __t0: Float;
    g = 0.5 * __t1: Float;
    i = i + 1: Int;
  }
  return g: Float;
}
fn nbody3(steps: Int): Float {
  let G: Float;
  G = 1.0: Float;
  let dt: Float;
  dt = 0.01: Float;
  let ax: Float;
  ax = -1.0: Float;
  let ay: Float;
  ay = 0.0: Float;
  let avx: Float;
  avx = 0.0: Float;
  let avy: Float;
  avy = 0.5: Float;
  let am: Float;
  am = 1.0: Float;
  let bx: Float;
  bx = 1.0: Float;
  let by: Float;
  by = 0.0: Float;
  let bvx: Float;
  bvx = 0.0: Float;
  let bvy: Float;
  bvy = -0.5: Float;
  let bm: Float;
  bm = 1.0: Float;
  let cx: Float;
  cx = 0.0: Float;
  let cy: Float;
  cy = 0.5: Float;
  let cvx: Float;
  cvx = -0.5: Float;
  let cvy: Float;
  cvy = 0.0: Float;
  let cm: Float;
  cm = 1.0: Float;
  let s: Int;
  s = 0: Int;
  while (s < steps: Bool) {
    let fax;
    fax = 0.0: Float;
    let fay;
    fay = 0.0: Float;
    let fbx;
    fbx = 0.0: Float;
    let fby;
    fby = 0.0: Float;
    let fcx;
    fcx = 0.0: Float;
    let fcy;
    fcy = 0.0: Float;
    let dx;
    dx = bx - ax: Float;
    let dy;
    dy = by - ay: Float;
    let r2;
    __t2 = dx * dx: Float;
    __t3 = dy * dy: Float;
    r2 = __t2 + __t3: Float;
    let inv_r;
    __t4 = sqrt_newton(r2: Float);
    inv_r = 1.0 / __t4: Float;
    let inv_r3;
    __t5 = inv_r * inv_r: Float;
    inv_r3 = __t5 * inv_r: Float;
    let f;
    f = G * inv_r3: Float;
    __t6 = f * bm: Float;
    __t7 = __t6 * dx: Float;
    fax = fax + __t7: Float;
    __t8 = f * bm: Float;
    __t9 = __t8 * dy: Float;
    fay = fay + __t9: Float;
    __t10 = f * am: Float;
    __t11 = __t10 * dx: Float;
    fbx = fbx - __t11: Float;
    __t12 = f * am: Float;
    __t13 = __t12 * dy: Float;
    fby = fby - __t13: Float;
    dx = cx - ax: Float;
    dy = cy - ay: Float;
    __t14 = dx * dx: Float;
    __t15 = dy * dy: Float;
    r2 = __t14 + __t15: Float;
    __t16 = sqrt_newton(r2: Float);
    inv_r = 1.0 / __t16: Float;
    __t17 = inv_r * inv_r: Float;
    inv_r3 = __t17 * inv_r: Float;
    f = G * inv_r3: Float;
    __t18 = f * cm: Float;
    __t19 = __t18 * dx: Float;
    fax = fax + __t19: Float;
    __t20 = f * cm: Float;
    __t21 = __t20 * dy: Float;
    fay = fay + __t21: Float;
    __t22 = f * am: Float;
    __t23 = __t22 * dx: Float;
    fcx = fcx - __t23: Float;
    __t24 = f * am: Float;
    __t25 = __t24 * dy: Float;
    fcy = fcy - __t25: Float;
    dx = cx - bx: Float;
    dy = cy - by: Float;
    __t26 = dx * dx: Float;
    __t27 = dy * dy: Float;
    r2 = __t26 + __t27: Float;
    __t28 = sqrt_newton(r2: Float);
    inv_r = 1.0 / __t28: Float;
    __t29 = inv_r * inv_r: Float;
    inv_r3 = __t29 * inv_r: Float;
    f = G * inv_r3: Float;
    __t30 = f * cm: Float;
    __t31 = __t30 * dx: Float;
    fbx = fbx + __t31: Float;
    __t32 = f * cm: Float;
    __t33 = __t32 * dy: Float;
    fby = fby + __t33: Float;
    __t34 = f * bm: Float;
    __t35 = __t34 * dx: Float;
    fcx = fcx - __t35: Float;
    __t36 = f * bm: Float;
    __t37 = __t36 * dy: Float;
    fcy = fcy - __t37: Float;
    __t38 = dt * fax: Float;
    __t39 = __t38 / am: Float;
    avx = avx + __t39: Float;
    __t40 = dt * fay: Float;
    __t41 = __t40 / am: Float;
    avy = avy + __t41: Float;
    __t42 = dt * fbx: Float;
    __t43 = __t42 / bm: Float;
    bvx = bvx + __t43: Float;
    __t44 = dt * fby: Float;
    __t45 = __t44 / bm: Float;
    bvy = bvy + __t45: Float;
    __t46 = dt * fcx: Float;
    __t47 = __t46 / cm: Float;
    cvx = cvx + __t47: Float;
    __t48 = dt * fcy: Float;
    __t49 = __t48 / cm: Float;
    cvy = cvy + __t49: Float;
    __t50 = dt * avx: Float;
    ax = ax + __t50: Float;
    __t51 = dt * avy: Float;
    ay = ay + __t51: Float;
    __t52 = dt * bvx: Float;
    bx = bx + __t52: Float;
    __t53 = dt * bvy: Float;
    by = by + __t53: Float;
    __t54 = dt * cvx: Float;
    cx = cx + __t54: Float;
    __t55 = dt * cvy: Float;
    cy = cy + __t55: Float;
    s = s + 1: Int;
  }
  let ke: Float;
  __t56 = 0.5 * am: Float;
  __t57 = avx * avx: Float;
  __t58 = avy * avy: Float;
  __t59 = __t57 + __t58: Float;
  __t60 = __t56 * __t59: Float;
  __t61 = 0.5 * bm: Float;
  __t62 = bvx * bvx: Float;
  __t63 = bvy * bvy: Float;
  __t64 = __t62 + __t63: Float;
  __t65 = __t61 * __t64: Float;
  __t66 = __t60 + __t65: Float;
  __t67 = 0.5 * cm: Float;
  __t68 = cvx * cvx: Float;
  __t69 = cvy * cvy: Float;
  __t70 = __t68 + __t69: Float;
  __t71 = __t67 * __t70: Float;
  ke = __t66 + __t71: Float;
  let dx: Float;
  dx = bx - ax: Float;
  let dy: Float;
  dy = by - ay: Float;
  let pe: Float;
  __t72 = -G: Float;
  __t73 = __t72 * am: Float;
  __t74 = __t73 * bm: Float;
  __t75 = dx * dx: Float;
  __t76 = dy * dy: Float;
  __t77 = sqrt_newton(__t75 + __t76: Float);
  pe = __t74 / __t77: Float;
  dx = cx - ax: Float;
  dy = cy - ay: Float;
  __t78 = G * am: Float;
  __t79 = __t78 * cm: Float;
  __t80 = dx * dx: Float;
  __t81 = dy * dy: Float;
  __t82 = sqrt_newton(__t80 + __t81: Float);
  __t83 = __t79 / __t82: Float;
  pe = pe - __t83: Float;
  dx = cx - bx: Float;
  dy = cy - by: Float;
  __t84 = G * bm: Float;
  __t85 = __t84 * cm: Float;
  __t86 = dx * dx: Float;
  __t87 = dy * dy: Float;
  __t88 = sqrt_newton(__t86 + __t87: Float);
  __t89 = __t85 / __t88: Float;
  pe = pe - __t89: Float;
  return ke + pe: Float;
}
let steps: Int;
steps = 5000: Int;
let e: Float;
__t90 = nbody3(steps: Int);
e = __t90: Float;
print e: Float;
